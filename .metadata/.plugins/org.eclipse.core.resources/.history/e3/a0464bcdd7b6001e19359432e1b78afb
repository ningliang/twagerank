package twage_rank;

import it.unimi.dsi.fastutil.ints.Int2DoubleOpenHashMap;
import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import log_utils.LogFile;
import utils.Utility;

public class TwageRank {
	private static final double MIN_DELTA = .001;
	
	public static void main(String[] args) {
		if (args.length != 2 && args.length != 3) {
			System.out.println("Usage: TwageRank <indir> <outdir>");
			System.out.println("Usage: TwageRank <indir> <outdir> <start>");
			System.exit(1);
		}
		
		List<File> files = Utility.getFiles(args[0]);
		long start = new Date().getTime();
		
		// Initialize
		Initializer initializer = new Initializer();
		Int2DoubleOpenHashMap state =  new Int2DoubleOpenHashMap();
		Int2IntOpenHashMap outDegrees = new Int2IntOpenHashMap();
		try {
			for (File file : files) {
				LogFile log = new LogFile(file.getPath());
				log.readAll(initializer);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(-1);
		}
		
		// If we have a starting guess read it in
		if (args.length == 3) {
			DataInputStream in = null;
			state = new Int2DoubleOpenHashMap(state.size());
			try {
				in = new DataInputStream(new BufferedInputStream(new FileInputStream(args[2])));
				while (in.available() > 0) {
					int key = in.readInt();
					double value = in.readDouble();
					state.put(key, value);
				}
			} catch (IOException e) {
				e.printStackTrace();
				System.exit(1);
			} finally {
				if (in != null) in.close();
			}
		}
		
		// Get state and out degree map
		state = initializer.getProbabilityMap();
		outDegrees = initializer.getOutDegreeMap();
		
		// Number of valid users
		System.out.println(state.size() + " users found.");
		
		// Verify all outDegrees > 0
		for (int key : outDegrees.keySet()) {
			if (outDegrees.get(key) == 0) {
				System.out.println(key + " has out degree 0.");
				System.exit(-1);
			}
		}
		
		// Iterate until we hit epsilon min
		int count = 0;
		double epsilon = Double.MAX_VALUE;
		while (epsilon > MIN_DELTA) {
			double magnitude = computeMagnitude(state);
			MatrixIterator iterator = new MatrixIterator(state, outDegrees);
			try {
				for (File file : files) {
					LogFile log = new LogFile(file.getPath());
					log.readAll(iterator);
				}
			} catch (Exception e) {
				e.printStackTrace();
				System.exit(-1);
			}
			
			Int2DoubleOpenHashMap nextState = iterator.getProbabilityMap();
			epsilon = computeEpsilon(state, nextState);
			state = nextState;
			
			// Report and output vector to file
			long time = new Date().getTime();
			System.out.println("Iteration " + count++ + ", epsilon " + epsilon + ", magnitude " + magnitude + ", time " + ((time - start)/1000) + " seconds.");
			try {
				// Create the new file
				DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(args[1] + "/" + start + "_" + count + ".txt")));
				for (int key : state.keySet()) {
					out.writeInt(key);
					out.writeDouble(state.get(key));
				}
				out.close();
				
				// Delete the old file
				if (count > 0) {
					File file = new File(args[1] + "/" + start + "_" + (count-1) + ".txt");
					file.delete();
				}				
			} catch (Exception e) {
				e.printStackTrace();
				System.exit(-1);
			}
		}
	}
	
	// Assumes same key sets - compute magnitude of vector difference
	private static double computeEpsilon(Int2DoubleOpenHashMap before, Int2DoubleOpenHashMap after) {
		double sum = 0.0;
		for (int key : before.keySet()) {
			double delta = before.get(key) - after.get(key);
			sum += delta * delta;
		}
		return Math.sqrt(sum);
	}
	
	// Compute magnitude of vector
	private static double computeMagnitude(Int2DoubleOpenHashMap vector) {
		double sum = 0.0;
		for (int key : vector.keySet()) {
			double entry = vector.get(key);
			sum += entry * entry;
		}
		return Math.sqrt(sum);
	}
}
