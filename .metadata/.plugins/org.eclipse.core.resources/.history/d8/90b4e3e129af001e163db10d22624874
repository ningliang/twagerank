package twagerank;

import it.unimi.dsi.fastutil.ints.Int2DoubleOpenHashMap;

import java.io.File;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import logutils.LogFile;

public class TwageRank {
	private static final double MIN_DELTA = 0.000001;
	
	public static void main(String[] args) {
		// Usage
		if (args.length != 1) {
			System.out.println("usage: TwageRank <dir>");
			System.exit(1);
		}
		
		// Ensure dir
		File dir = new File(args[0]);
		if (!dir.isDirectory()) {
			System.out.println("Not a directory: " + dir.getAbsolutePath());
			System.exit(1);
		}
		
		// Get array of File
		List<File> files = new LinkedList<File>();
		for (File file : dir.listFiles()) if (file.getPath().endsWith(".txt")) files.add(file);
				
		// Initialize the vector
		VectorInitializer initializer = new VectorInitializer();
		try {
			for (File file : files) {
				LogFile log = new LogFile(file.getPath());
				log.readAll(initializer);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
		Int2DoubleOpenHashMap vector = initializer.getVector();
		System.out.println("Vector has " + vector.size() + " values");
		
		// Mark start time
		long start = new Date().getTime();
		
		// Iterate!
		double delta = Double.MAX_VALUE;
		int count = 0;
		try {
			while (delta > MIN_DELTA) {
				VectorTransformer transformer = new VectorTransformer(vector);
				for (File file : files) {
					LogFile log = new LogFile(file.getPath());
					log.readAll(transformer);
				}
				Int2DoubleOpenHashMap transformedVector = transformer.getVector();
				delta = calculateDelta(vector, transformedVector);
				vector = transformedVector;
				
				// Log progress
				System.out.println((++count) + " iterations in " + ((new Date().getTime() - start)/1000) + " seconds, DELTA " + delta);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
		
		// At this point vector is the convergent page rank vector - write it out
	}
	
	// Assumes identical key sets
	private static double calculateDelta(Int2DoubleOpenHashMap first, Int2DoubleOpenHashMap second) {
		double delta = 0.0;
		for (int key : first.keySet()) {
			double change = first.get(key) - second.get(key);
			delta += change*change;
		}
		return delta;
	}
}
